var documenterSearchIndex = {"docs":
[{"location":"toc.html#Table-of-contents","page":"Table of Contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\n            \"index.md\",\n            \"list.md\",\n            \"autodocs.md\"\n        ]\nDepth = 3","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"list.html","page":"Index","title":"Index","text":"CurrentModule = PDBenchmark","category":"page"},{"location":"list.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"list.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#PDBenchmark","page":"Home","title":"PDBenchmark","text":"","category":"section"},{"location":"autodocs.html#Automatic-documentation","page":"Autodocs","title":"Automatic documentation","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Table of contents on this page","category":"page"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Pages = [\"autodocs.md\"]\nDepth = 4","category":"page"},{"location":"autodocs.html#Test","page":"Autodocs","title":"Test","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"test.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.PDTest","page":"Autodocs","title":"PDBenchmark.PDTest","text":"PDTest\n\nAn abstract type for tests. It is used to pass tests to the run function.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDBenchmark.TParam","page":"Autodocs","title":"PDBenchmark.TParam","text":"TParam\n\nA type for test parameters. It is used to pass parameters to the test functions.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDBenchmark.TParam-Tuple{Union{Function, Type}}","page":"Autodocs","title":"PDBenchmark.TParam","text":"TParam(name::Union{Function, Type}; args=(), kwargs=Dict())\n\nCreate a TParam object.\n\nArguments\n\nname::Union{Function, Type}: The name of the parameter.\n\nKeyword Arguments\n\nargs::Tuple: The arguments of the parameter.\nkwargs::Dict: The keyword arguments of the parameter.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.Test","page":"Autodocs","title":"PDBenchmark.Test","text":"Test <: PDTest\n\nAn abstract type for tests. It is used to pass tests to the run function.\n\nFields\n\nsolver: The solver to be used.\ngeom: The geometry of the blocks.\ngen_material: The material of the blocks.\nspc_material: The special material of the blocks.\nbc: The boundary conditions of the blocks.\nRM: The contact models of the blocks.\nf: The post environment function.\ndt: The time step.\nsteps: The number of steps.\nblocknames: The names of the blocks.\ntestname: The name of the test.\ninfo: The information of the test.\ncprint: The function to be used for printing.\nunits: Whether to use units.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDBenchmark.Test-Tuple","page":"Autodocs","title":"PDBenchmark.Test","text":"Test(args...; dt=1.0, steps=1000,\n        names=nothing,\n        testname=\"Test ABC\",\n        info=\"\",\n        cprint=(x)-> nothing,\n        units=true\n        )\n\nCreate a Test object.\n\nArguments\n\nargs...: The arguments of the test.\n\nKeyword Arguments\n\ndt::Float64: The time step.\nsteps::Int: The number of steps.\nnames::Union{Nothing, Vector{String}}: The names of the blocks.\ntestname::String: The name of the test.\ninfo::String: The information of the test.\ncprint::Function: The function to be used for printing.\nunits::Bool: Whether to use units.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.realize-Tuple{TParam, Module}","page":"Autodocs","title":"PDBenchmark.realize","text":"realize(m::TParam, module_::Module)\n\nRealizes the parameter m by calling getproperty(module_, m.name)(m.args...; m.kwargs...).\n\nArguments\n\nm::TParam: The parameter to be realized.\nmodule_::Module: The module in which the function is defined.\n\nReturns\n\nThe return value of the m.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.realize-Tuple{TParam, Vararg{Any}}","page":"Autodocs","title":"PDBenchmark.realize","text":"realize(m::TParam, args...; kwargs...)\n\nRealizes the parameter m by calling m.name(args..., m.args...; kwargs..., m.kwargs...).\n\nArguments\n\nm::TParam: The parameter to be realized.\nargs...: The arguments to be passed to the function.\n\nKeyword Arguments\n\nkwargs...: The keyword arguments to be passed to the function.\n\nReturns\n\nThe return value of the m.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.realize-Tuple{TParam}","page":"Autodocs","title":"PDBenchmark.realize","text":"realize(m::TParam)\n\nRealizes the parameter m by calling m.name(m.args...; m.kwargs...).\n\nArguments\n\nm::TParam: The parameter to be realized.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.run!-Tuple{Test}","page":"Autodocs","title":"PDBenchmark.run!","text":"run!(test::Test; append_date=false, pseudorun=false, kwargs...)\n\nRuns the test test and returns the environment env after the simulation.\n\nArguments\n\ntest::Test: The test to be run.\nappend_date::Bool=false: If true, the date will be appended to the output directory.\npseudorun::Bool=false: If true, the simulation will not be run.\nkwargs...: Keyword arguments to be passed to PeriDyn.run! function.\n\ntip: Keyword Arguments are same as for `PeriDyn.run!` function\nsteps: Int64, the number of steps to run. Default is 100.\nfilewrite_freq: Int64, the frequency of writing data files to disk. Default is 10.\nneigh_update_freq: Int64, the frequency of updating neighbors. Default is 1.\naverage_prop_freq: Int64, the frequency of calculating average properties. Default is 1.\nout_dir: String, the directory where the data files are saved. Default is \"datafile\".\nstart_at: Int64, the starting step. Default is 0.\nwrite_from: Int, the starting index of the data files. Default is 0.\next: Symbol, the extension of the data files. Default is :jld.\nmax_part: Int, the maximum number of particles in a neighborhood. Default is 30.\n\nReturns\n\nenv::Env: The environment after the simulation.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.stage!-Tuple{Test}","page":"Autodocs","title":"PDBenchmark.stage!","text":"stage!(test::Test)\n\nStage the test for running.\n\nArguments\n\ntest::Test: The test to be staged.\n\nReturns\n\nenv::Environment: The environment of the test.\nsolver::Solver: The solver of the test.\nfunc::Function: The run function of the test.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Tensile","page":"Autodocs","title":"Tensile","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"tensile/tensile.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.TensileBar-Tuple","page":"Autodocs","title":"PDBenchmark.TensileBar","text":"TensileBar(args...; testname=\"Tensile Test Bar\", kwargs...)\n\nIt is a test for uniaxial deformation.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   TensileTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the TensileTest function. specimen is set to :bar by default.\n\nReturns\n\nThe return value of the TensileTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.TensileNotchedBar-Tuple","page":"Autodocs","title":"PDBenchmark.TensileNotchedBar","text":"TensileNotchedBar(args...; testname=\"Tensile Test Notched Bar\", kwargs...)\n\nIt is a test for uniaxial deformation.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   TensileBar function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the TensileBar function. notched is set to true by default.\n\nReturns\n\nThe return value of the TensileBar function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.TensileRod-Tuple","page":"Autodocs","title":"PDBenchmark.TensileRod","text":"TensileRod(args...; testname=\"Tensile Test Rod\", kwargs...)\n\nIt is a test for uniaxial deformation.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   TensileTest function.\n\nKeyword Arguments\n\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the TensileTest function. specimen is set to :rod by default.\n\nReturns\n\nThe return value of the TensileTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.TensileTest-Tuple","page":"Autodocs","title":"PDBenchmark.TensileTest","text":"TensileTest(args...; max_strain=0.05, testname=\"Tensile Test\", kwargs...)\n\nIt is a test for uniaxial deformation.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   UniaxialDeformationTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nmax_strain::Float64: The maximum strain of the test. If it is negative, the   absolute value of it is used.\nkwargs...: The keyword arguments of the test. The keyword arguments   are passed to the UniaxialDeformationTest function.\n\nReturns\n\nThe return value of the UniaxialDeformationTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.UniaxialDeformationTest-Tuple{}","page":"Autodocs","title":"PDBenchmark.UniaxialDeformationTest","text":"UniaxialDeformationTest(; gen_mat=nothing, spc_mat=nothing, dt=1.0,\n                    max_strain=0.05,\n                    resolution=0.1,\n                    rand_=0.05,\n                    solver=PeriDyn.DSVelocityVerlet(),\n                    steps=10000,\n                    notched=false,\n                    effective_length = 12.0,\n                    specimen=:bar,\n                    testname=\"Tensile Test\")\n\nIt is a test for uniaxial deformation. The test is performed by applying a displacement on both ends of the specimen. The specimen is a bar by default.\n\nKeyword Arguments\n\ngen_mat: The general material of the specimen.\nspc_mat: The specific material of the specimen.\ndt: The time step of the simulation.\nmax_strain::Float64: The maximum strain of the specimen.\nresolution: The resolution of the specimen.\nrand_: The random factor of the specimen.\nsolver: The solver.\nsteps: The number of steps.\nnotched: Whether the specimen is notched.\neffective_length: The effective length of the specimen.\nspecimen: The type of the specimen. It can be :bar, :rod or :cylinder.\ntestname: The name of the test.\n\nReturns\n\ntest: The test.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Flexure","page":"Autodocs","title":"Flexure","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"flexure/flexure.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.BeamBendingTest-Tuple{}","page":"Autodocs","title":"PDBenchmark.BeamBendingTest","text":"function BeamBendingTest(; gen_mat=nothing, spc_mat=nothing, resolution=0.1,\n        solver=DSVelocityVerlet(), dt=1.0, steps=1000,\n        notched=false, _4point=false, testname=\"Beam Bending Test\")\n\nIt is a test for beam bending. The test is performed by applying a point load on the top of the specimen. The specimen is a beam. Both ends of the beam are supported by a pin support.\n\nKeyword Arguments\n\ngen_mat: The general material of the specimen.\nspc_mat: The specific material of the specimen.\nresolution: The resolution of the specimen.\nsolver: The solver of the simulation.\ndt: The time step of the simulation.\nsteps: The number of steps of the simulation.\nnotched: Whether the specimen is notched.\n_4point: Whether the specimen is a 4 point beam bending test.\ntestname: The name of the test.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark._3PointBeamBendingTest-Tuple","page":"Autodocs","title":"PDBenchmark._3PointBeamBendingTest","text":"_3PointBeamBendingTest(args...; testname=\"3 Point Beam Bending Test\", kwargs...)\n\nIt is a test for beam bending. The test is performed by applying a point load on the top of the specimen. The specimen is a beam. Both ends of the beam are supported by a pin support.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   BeamBendingTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the BeamBendingTest function. _4point is set to false by default.\n\nReturns\n\nThe return value of the BeamBendingTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark._3PointNotchedBeamBendingTest-Tuple","page":"Autodocs","title":"PDBenchmark._3PointNotchedBeamBendingTest","text":"_3PointNotchedBeamBendingTest(args...; testname=\"3 Point Notched Beam Bending Test\", kwargs...)\n\nIt is a test for beam bending. The test is performed by applying a point load on the top of the specimen. The specimen is a beam. Both ends of the beam are supported by a pin support.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   _3PointBeamBendingTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the _3PointBeamBendingTest function. notched is set to true by default.\n\nReturns\n\nThe return value of the BeamBendingTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark._4PointBeamBendingTest-Tuple","page":"Autodocs","title":"PDBenchmark._4PointBeamBendingTest","text":"_4PointBeamBendingTest(args...; testname=\"4 Point Beam Bending Test\", kwargs...)\n\nIt is a test for beam bending. The test is performed by applying a point load on the top of the specimen. The specimen is a beam. Both ends of the beam are supported by a pin support.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   BeamBendingTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the BeamBendingTest function. _4point is set to true by default.\n\nReturns\n\nThe return value of the BeamBendingTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark._4PointNotchedBeamBendingTest-Tuple","page":"Autodocs","title":"PDBenchmark._4PointNotchedBeamBendingTest","text":"_4PointNotchedBeamBendingTest(args...; testname=\"4 Point Notched Beam Bending Test\", kwargs...)\n\nIt is a test for beam bending. The test is performed by applying a point load on the top of the specimen. The specimen is a beam. Both ends of the beam are supported by a pin support.\n\nArguments\n\nargs...: The arguments of the test. The arguments are passed to the   _4PointBeamBendingTest function.\n\nKeyword Arguments\n\ntestname::String: The name of the test.\nkwargs...: The keyword arguments of the test. The keyword arguments are   passed to the _4PointBeamBendingTest function. notched is set to true by default.\n\nReturns\n\nThe return value of the BeamBendingTest function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Impact","page":"Autodocs","title":"Impact","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"impact/pulse.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.PulsePropagationBar-Tuple{}","page":"Autodocs","title":"PDBenchmark.PulsePropagationBar","text":"PulsePropagationBar(; gen_mat=nothing,\n                    spc_mat=nothing,\n                    dt = 1.0,\n                    steps=1000,\n                    init_velocity=nothing,\n                    effective_length=20.0,\n                    resolution=0.1,\n                    solver=DSVelocityVerlet(),\n                    testname=\"PulsePropagationBar Test\",\n                    )\n\nIt is a test for pulse propagation. The test is performed by applying a impact on the right end of the specimen. The impact is applied in the direction of the axis of the specimen. The specimen is a bar.\n\nKeyword Arguments\n\ngen_mat: The general material of the specimen.\nspc_mat: The specific material of the specimen.\ndt::Float64: The time step.\nsteps::Int64: The number of steps.\ninit_velocity::Float64: The initial velocity of the impact.\neffective_length::Float64: The effective length of the specimen.\nresolution::Float64: The resolution of the specimen.\nsolver::Function: The solver.\ntestname::String: The name of the test.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Indentation","page":"Autodocs","title":"Indentation","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"indentation/indentation.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.IndentationTest-Tuple{}","page":"Autodocs","title":"PDBenchmark.IndentationTest","text":"IndentationTest(; gen_mat=nothing, spc_mat=nothing, resolution=1.0,\n        angle=120.0, sides=3,\n        solver=DSVelocityVerlet(), dt=1.0, steps=8000, testname=\"Indentation Test\")\n\nIt is a test for indentation test. The test is performed by applying a displacement to the indentor. The displacement is applied in the direction of the axis of the indentor. The indentor is a triangular pyramid.\n\nKeyword Arguments\n\ngen_mat: The general material.\nspc_mat: The specific material.\nresolution::Float64: The resolution of the test.\nangle::Float64: The angle of the indentor.\nsides::Int: The number of sides of the indentor.\nsolver::Solver: The solver.\ndt::Float64: The time step.\nsteps::Int: The number of steps.\ntestname::String: The name of the test.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Predefined-geometries","page":"Autodocs","title":"Predefined geometries","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"geom/geom.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.PDBGeom","page":"Autodocs","title":"PDBenchmark.PDBGeom","text":"PDBGeom\n\nAbstract type for PDBGeom objects. A PDBGeom object is a representation of a geometry of an object.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{PDBGeom}","page":"Autodocs","title":"PDMaterialPoints.create","text":"function create(geom::PDBGeom; resolution=0.1, rand_=0.05, type=1)\n\nCreate a PDMaterialPoints object from a PDBGeom object.\n\nArguments\n\ngeom::PDBGeom: a PDBGeom object\n\nKeyword Arguments\n\nresolution::Float64: resolution of the bar\nrand_::Float64: randomization of the bar\ntype::Int: type of the bar\n\nReturns\n\ndict: a dictionary same as the one returned by PDMaterialPoints.create\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Bar","page":"Autodocs","title":"Bar","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"geom/bar.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.Bar","page":"Autodocs","title":"PDBenchmark.Bar","text":"Bar <: PDBGeom\n\nA bar geometry.\n\nFields\n\nobj::Cuboid: a Cuboid object\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDBenchmark.Bar-Tuple{}","page":"Autodocs","title":"PDBenchmark.Bar","text":"Bar(;bounds=[0.0 10; 0 2;0 2])\n\nCreate a Bar object.\n\nKeyword Arguments\n\nbounds::Array{Float64, 2}: bounds of the bar\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.NotchedBar","page":"Autodocs","title":"PDBenchmark.NotchedBar","text":"NotchedBar <: PDBGeom\n\nA notched bar geometry.\n\nFields\n\nobj::Cuboid: a Cuboid object\nnotch::Array{Float64, 2}: a 2D array of notches\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PDBenchmark.NotchedBar-Tuple{}","page":"Autodocs","title":"PDBenchmark.NotchedBar","text":"NotchedBar(;bounds=[0.0 7.0; 0 1;0 1], notch=nothing)\n\nCreate a NotchedBar object.\n\nKeyword Arguments\n\nbounds::Array{Float64, 2}: bounds of the bar\nnotch::Array{Float64, 2}: a 2D array of notches\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{Bar}","page":"Autodocs","title":"PDMaterialPoints.create","text":"function create(geom::Bar; resolution=0.1, rand_=0.05, type=1)\n\nCreate a PDMaterialPoints object from a Bar object.\n\nArguments\n\ngeom::Bar: a Bar object\n\nKeyword Arguments\n\nresolution::Float64: resolution of the bar\nrand_::Float64: randomization of the bar\ntype::Int: type of the bar\n\nReturns\n\ndict: a dictionary same as the one returned by PDMaterialPoints.create\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDMaterialPoints.create-Tuple{NotchedBar}","page":"Autodocs","title":"PDMaterialPoints.create","text":"function create(geom::NotchedBar; resolution=0.1, rand_=0.05, type=1)\n\nCreate a PDMaterialPoints object from a NotchedBar object.\n\nArguments\n\ngeom::NotchedBar: a NotchedBar object\n\nKeyword Arguments\n\nresolution::Float64: resolution of the bar\nrand_::Float64: randomization of the bar\ntype::Int: type of the bar\n\nReturns\n\ndict: a dictionary same as the one returned by PDMaterialPoints.create\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#Standard-simulations","page":"Autodocs","title":"Standard simulations","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"standard_simulations/disk_impact.jl\"]","category":"page"},{"location":"autodocs.html#Miscellaneous","page":"Autodocs","title":"Miscellaneous","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PDBenchmark]\nPages   = [\"PDBenchmark.jl\"]","category":"page"},{"location":"autodocs.html#PDBenchmark.set_device-Tuple{Any}","page":"Autodocs","title":"PDBenchmark.set_device","text":"set_device(x)\n\nSet the device to run on.\n\nArguments\n\nx::Symbol: The device to run on. Can be :cpu or :cuda.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PDBenchmark.set_loglevel-Tuple{Any}","page":"Autodocs","title":"PDBenchmark.set_loglevel","text":"set_loglevel(x)\n\nSet the log level.\n\nArguments\n\nx::Symbol: The log level. Can be :debug, :info, :warn, :error, or :fatal.\n\n\n\n\n\n","category":"method"}]
}
